
import os.path
import re

VER_MAJOR = 1
VER_MINOR = 1
VER_STRING = str(VER_MAJOR) + "." + str(VER_MINOR)




class DNSMasq():
	def __init__(self,root_conf="/etc/dnsmasq.conf"):
		self.config = DNSMasq_conf(root_conf)

	def restart_service(self):
		print("RESTARTING DNSMASQ SERVICE...")

	def update(self):
		self.config.write()
		self.restart_service()




class DNSMasq_conf():
	def __repr__(self):
		return "< DNSMasq Object : " + str([f.path for f in self.conf_files]) + " >"
	
	def __init__(self,root_conf="/etc/dnsmasq.conf"):
		self.root_conf = root_conf
		self.conf_files = []

		self.parse()
	
	def parse(self,path=None):
		if path == None:
			path = self.root_conf
		
		conf = DNSMasq_file(path)
		self.conf_files.append(conf)
		for path in conf.links:
			self.parse(path)

	def write(self):
		for f in self.conf_files:
			f.write()



class basic():
	@property	
	def strings(self):
		array = []
		for i,e in enumerate(self.entries):
			array.append(self.print(i))
		return array

	def __iter__(self):
		return iter(self.entries)

	def __next__(self):
		if self.cur > len(self.entries):
			raise StopIteration
		else:
			self.cur += 1
			return self.cur - 1
	
	def __getitem__(self,key):
		return self.entries[key]

	def __repr__(self):
		return repr(self.entries)
	
	def __init__(self,value=None):
		self.entries = []
		self.cur = 0

		if not value == None:
			self.parse(value)

	def parse(self,string):
		self.entries.append(string)

	def print(self,idx):
		return self.entries[idx]	

class dhcphost(basic):	
	def parse(self,string):
		host,ip = string.split(',')
		if not re.search("..:..:..:..:..:..",host) == None:
			hostmac = host
			hostname = None
			typ = "host-mac"
		else:
			hostname = host
			hostmac = None
			typ = "host-name"
		self.entries.append({ 'host-mac':hostmac, 'host-name':hostname, 'static-ip':ip, 'type':typ })

	def print(self,idx):
		return self.entries[idx][self.entries[idx]["type"]] + "," + self.entries[idx]["static-ip"]

class dhcpoption(basic):
	def parse(self,value):
		tag,idx,val = value.split(',')

		self.entries.append({ 'tag' : tag, 'idx' : idx, 'value' : val })

	def print(self,idx):
		return self.entries[idx]['tag'] + "," + self.entries[idx]['idx'] + "," + self.entries[idx]['value']

class dhcprange(basic):
	def parse(self,value):
		tag,low,high = value.split(',')
		self.entries.append({ "tag" : tag, "ip-low" : low, "ip-high" : high })

	def print(self,idx):
		return self.entries[idx]["tag"] + "," + self.entries[idx]["ip-low"] + "," + self.entries[idx]["ip-high"]

opt_cls = {
	"switches"		: basic,
	"dhcp-host" 	: dhcphost,
	"dhcp-option"	: dhcpoption,
	"dhcp-range"	: dhcprange,
	"default"		: basic,
}

class DNSMasq_file():
	@property
	def links(self):
		try:
			return self.conf_dict["conf-file"].strings
		except:
			return []
	
	def __repr__(self):
		return repr(self.conf_dict)

	def __init__(self,path=None):
		if path == None:
			path = "/etc/dnsmasq.conf"

		self.path = os.path.abspath(path)
		self.conf_dict = {}

		self.parse()

	def parse(self):
		with open(self.path,"r") as fp:
			for line in fp.readlines():
				line = re.sub("#.*","",line).strip()
				if len(line) == 0:
					continue

				try:
					option,value = line.split('=')
				except ValueError:
					option = "switches"
					value = line

				try:
					if option in self.conf_dict.keys():
						self.conf_dict[option].parse(value)
					else:
						self.conf_dict[option] = opt_cls[option](value)
				except KeyError:
					if option in self.conf_dict.keys():
						self.conf_dict[option].parse(value)
					else:
						self.conf_dict[option] = opt_cls["default"](value)

	def write(self,path=None):
		if self.conf_dict == {}:
			return

		if path == None:
			path = self.path + ".new"

		with open(path,"w") as fp:
			fp.write("#%s\n\n# Config file for DNSMasq.\n# This file was auto-generated by Py-DNSMasq V%s.\n\n" % (self.path,VER_STRING))

			for option in self.conf_dict.keys():
				for value in self.conf_dict[option].strings:
					
					if option == "switches":
						fp.write(value + "\n")
					else:
						fp.write(option + "=" + value + "\n")
